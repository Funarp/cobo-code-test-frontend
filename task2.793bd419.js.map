{"version":3,"sources":["js/maze.js","js/panel.js","js/solve.js","js/task2.js"],"names":["rander_cells","x","y","points","cale","maze","cells","document","createElement","setAttribute","i","length","row","j","cell","gen_class","appendChild","n","horiz","verti","here","Math","floor","random","path","unvisited","k","push","potential","neighbors","next","pop","alert","temp","data","top","bottom","left","right","point","key","maze_panel","rows","getElementsByClassName","value","panel","nodes","children","eachRow","node","borders","classList","split","filter","className","indexOf","borderMap","forEach","line","Object","assign","console","log","JSON","stringify","DISABLE_DIR_ZERO","DEBUG","opposite","dir","directions_count","dis_count","solve_maze","end_x","end_y","current_x","current_y","panel_copy","parse","current_point","app","body","path_count","timer_num","solve_one_step","add","window","clearInterval","solve_all","onkeydown","undefined","setInterval","e","all","event","keyCode","which"],"mappings":"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","file":"task2.793bd419.js","sourceRoot":"..","sourcesContent":["export const rander_cells = function (x, y) {\n    let points = cale(maze(x, y))\n    let cells = document.createElement('div')\n    cells.setAttribute('id', 'cells')\n    for (let i = 0; i < points.length; i++) {\n        let row = document.createElement('div')\n        row.setAttribute('class', 'row')\n        for (let j = 0; j < points[i].length; j++) {\n            let cell = document.createElement('div')\n            if (i == j && j == 0) {\n                cell.setAttribute('class', `${gen_class(points[i][j])} rat`)\n            } else {\n                cell.setAttribute('class', `${gen_class(points[i][j])}`)\n            }\n            row.appendChild(cell)\n        }\n        cells.appendChild(row)\n    }\n    return cells\n}\n\nfunction maze(x, y) {\n    let n = x * y - 1;\n    if (n < 0) { alert(\"illegal maze dimensions\"); return; }\n    let horiz = []; for (let j = 0; j < x + 1; j++) horiz[j] = [];\n    let verti = []; for (let j = 0; j < x + 1; j++) verti[j] = [];\n    let here = [Math.floor(Math.random() * x), Math.floor(Math.random() * y)];\n    let path = [here];\n    let unvisited = [];\n    for (let j = 0; j < x + 2; j++) {\n        unvisited[j] = [];\n        for (let k = 0; k < y + 1; k++)\n            unvisited[j].push(j > 0 && j < x + 1 && k > 0 && (j != here[0] + 1 || k != here[1] + 1));\n    }\n    while (0 < n) {\n        let potential = [[here[0] + 1, here[1]], [here[0], here[1] + 1],\n        [here[0] - 1, here[1]], [here[0], here[1] - 1]];\n        let neighbors = [];\n        for (let j = 0; j < 4; j++)\n            if (unvisited[potential[j][0] + 1][potential[j][1] + 1])\n                neighbors.push(potential[j]);\n        if (neighbors.length) {\n            n = n - 1;\n            let next = neighbors[Math.floor(Math.random() * neighbors.length)];\n            unvisited[next[0] + 1][next[1] + 1] = false;\n            if (next[0] == here[0])\n                horiz[next[0]][(next[1] + here[1] - 1) / 2] = true;\n            else\n                verti[(next[0] + here[0] - 1) / 2][next[1]] = true;\n            path.push(here = next);\n        } else\n            here = path.pop();\n    }\n    return { x: x, y: y, horiz: horiz, verti: verti };\n}\n\n\nfunction cale(maze) {\n    let points = []\n    for (let i = 0; i < maze.x; i++) {\n        let temp = []\n        for (let j = 0; j < maze.y; j++) {\n            let data = {\n                top: false,\n                bottom: false,\n                left: false,\n                right: false\n            }\n            if (i == 0) {\n                data.top = true;\n            }\n            else if (i == maze.x - 1) {\n                data.bottom = true;\n            }\n            if (j == 0) {\n                data.left = true;\n            } else if (j == maze.y - 1) {\n                data.right = true;\n            }\n            temp.push(data)\n        }\n        points.push(temp)\n    }\n    points[0][0].left = false;\n    points[maze.x - 1][maze.y - 1].right = false;\n    for (let i = 0; i < maze.x; i++) {\n        for (let j = 0; j < maze.y - 1; j++) {\n            if (!maze.horiz[i][j]) {\n                points[i][j].right = true;\n                points[i][j + 1].left = true;\n            }\n        }\n    }\n    for (let i = 0; i < maze.y - 1; i++) {\n        for (let j = 0; j < maze.x; j++) {\n            if (!maze.verti[i][j]) {\n                points[i][j].bottom = true;\n                points[i + 1][j].top = true;\n            }\n        }\n    }\n    return points\n}\n\nfunction gen_class(point) {\n    let temp = \"\"\n    for (let key in point) {\n        if (point[key]) {\n            temp += `${key} `\n        }\n    }\n    temp += \"cell\"\n    return temp\n}\n","let maze_panel = () => {\n    const rows = document.getElementsByClassName('row');\n    const value = { top: false, left: false, bottom: false, right: false };\n    let panel = [];\n    for (let row of rows) {\n        const nodes = row.children;\n        let eachRow = [];\n        for (let node of nodes) {\n            const borders = node.classList.value.split(' ').filter(className => ['top', 'left', 'right', 'bottom'].indexOf(className) != -1)\n            const borderMap = {}\n            borders.forEach(line => borderMap[line] = true)\n            eachRow.push(Object.assign({}, value, borderMap))\n        }\n        panel.push(eachRow)\n    }\n    console.log(JSON.stringify(panel))\n    return panel\n}\n\nexport {maze_panel}","const DISABLE_DIR_ZERO = \"left\";\nconst DEBUG = true;\n\nfunction opposite(dir) {\n    switch (dir) {\n        case \"top\": return \"bottom\";\n        case \"bottom\": return \"top\";\n        case \"left\": return \"right\";\n        case \"right\": return \"left\";\n        default:\n            break;\n    }\n}\n\nfunction directions_count(point) {\n    let dis_count = 0;\n    for (var key in point) {\n        if (!point[key]) { dis_count++ }\n    }\n    return dis_count;\n}\n\nexport const solve_maze = function(panel) {\n    let end_x = panel.length - 1;\n    let end_y = panel[end_x].length - 1;\n    let current_x = 0, current_y = 0;\n    // solve path\n    let path = [[current_x, current_y]]\n\n    let panel_copy = JSON.parse(JSON.stringify(panel));\n    panel_copy[0][0][DISABLE_DIR_ZERO] = true;\n    while (true) {\n        if (current_x == end_x && current_y == end_y) {\n            if (DEBUG) {\n                console.log(path)\n            }\n            return path;\n        }\n        let current_point = panel_copy[current_x][current_y];\n        // count avaliable directions\n        if (directions_count(current_point) > 0) {\n            for (const dir in current_point) {\n                if (!current_point[dir]) {\n                    current_point[dir] = true;\n                    // move\n                    switch (dir) {\n                        case \"top\": current_x--; break;\n                        case \"bottom\": current_x++; break;\n                        case \"left\": current_y--; break;\n                        case \"right\": current_y++; break;\n                        default: break;\n                    }\n                    path.push([current_x, current_y]);\n                    panel_copy[current_x][current_y][opposite(dir)] = true;\n                    break;\n                }\n            }\n        } else {\n            if (current_x == 0 && current_y == 0) {\n                alert(\"cannot solve the maze!\")\n                return;\n            }\n            // back\n            path.pop()\n            current_x = path[path.length - 1][0]\n            current_y = path[path.length - 1][1]\n        }\n    }\n}","import { rander_cells } from './maze'\nimport { maze_panel } from'./panel'\nimport { solve_maze } from './solve'\nconst app = rander_cells(20, 20)\ndocument.body.appendChild(app);\n\nconst rows = document.getElementsByClassName('row');\nconst panel = maze_panel();\nconst path = solve_maze(panel);\n\nlet path_count = 0;\nlet timer_num = 0;\nfunction solve_one_step() {\n    if(path_count < path.length){\n        let value = path[path_count];\n        rows[value[0]].children[value[1]].classList.add('rat');\n        path_count++;\n    }else{\n        if(timer_num != 0){\n            window.clearInterval(timer_num)\n        }\n    }\n}\n\nfunction solve_all() {\n    if(path_count < path.length){\n        document.onkeydown = undefined\n        timer_num = setInterval(solve_one_step,300)\n    }\n}\n\ndocument.onkeydown = function (e) {\n    let checkIE = (document.all) ? true : false;\n    let key;\n    if (checkIE) {\n        key = window.event.keyCode;\n    } else {\n        key = e.which;\n    }\n    switch (key) {\n        case 83: // press 's' for one step\n            solve_one_step();break;\n        case 13:\n            solve_all();break;\n        default:\n            break;\n    }\n};"]}